// Clearfix
// Usage: @include clearfix();
@mixin clearfix() {
  *zoom: 1;
  &:before, &:after {
    content: ' ';
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Font Face
// Usage: @include font-face(name, $font-files(font-name-path, formats), font-name-path(eot), weight, style);
@function font-files($font-name, $formats...) {
  $full: '';
  @for $i from 1 through length($formats) {
    $full: $full + 'url("#{$font-name}.' + nth($formats, $i);
    @if nth($formats, $i) == 'ttf' {
      $full: $full + '") format("truetype")';
    }
    @else if nth($formats, $i) == 'svg' {
      $full: $full + '") format("svg")';
    }
    @else {
      $full: $full + '") format("' + nth($formats, $i) + '")';
    }
    @if $i != length($formats) {
      $full: $full + ', ';
    }
  }
  @return unquote($full);
}
@mixin font-face($name, $font-files, $eot: false, $weight: false, $style: false) {
  $iefont: unquote("#{$eot}?#iefix");
  @font-face {
    font-family: quote($name);
    @if $eot {
      src: url($eot);
      $font-files: url(quote($iefont)) unquote("format('embedded-opentype')"), $font-files;
    }
    src: $font-files;
    @if $weight {
      font-weight: $weight;
    }
    @if $style {
      font-style: $style;
    }
  }
}

// Font Size
// Usage: @include font-size(1.4);
@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

// Responsive Breakpoints
// Usage: @include breakpoint(xs|sm|md|lg|xl|768px|768px, 1200px);
@mixin breakpoint($min: 0, $max: 0) {
  $type: type-of($min);
  @if $type == string {
    @if $min == xs {
      @media (max-width: 575px) { @content; }
    }
    @if $min == sm {
      @media (min-width: 576px) { @content; }
    }
    @else if $min == md {
      @media (min-width: 768px) { @content; }
    }
    @else if $min == lg {
      @media (min-width: 992px) { @content; }
    }
    @else if $min == xl {
      @media (min-width: 1200px) { @content; }
    }
  }
  @else if $type == number {
    $query: "all" !default;
    @if $min != 0 and $max != 0 { 
      $query: "(min-width: #{$min}) and (max-width: #{$max})"; 
    }
    @else if $min != 0 and $max == 0 { 
      $query: "(min-width: #{$min})"; 
    }
    @else if $min == 0 and $max != 0 { 
      $query: "(max-width: #{$max})"; 
    }
    @media #{$query} { 
      @content;
    }
  }
}

// CSS Properties
// Usage: @include border-radius(1-4 length|% / 1-4 length|%|initial|inherit);
@mixin border-radius($arguments) {
  @include vendor('border-radius', $arguments);
}
// Usage: @include box-shadow(none|h-shadow v-shadow blur spread color |inset|initial|inherit);
@mixin box-shadow($arguments) {
  @include vendor('box-shadow', $arguments);
}
// Usage: @include transition(property duration timing-function delay|initial|inherit);
@mixin transition($arguments) {
  @include vendor('transition', $arguments);
}
// Usage: @include transform(none|transform-functions|initial|inherit);
@mixin transform($arguments) {
  @include vendor('transform', $arguments);
}
// Usage: @include transform-origin(x-axis y-axis z-axis|initial|inherit);
@mixin transform-origin($arguments) {
  @include vendor('transform-origin', $arguments);
}
// Usage: @include user-select(auto|none|text|all);
@mixin user-select($arguments) {
  @include vendor('user-select', $arguments);
}

